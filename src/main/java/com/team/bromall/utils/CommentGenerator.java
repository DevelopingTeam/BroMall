package com.team.bromall.utils;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.CompilationUnit;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.InnerClass;
import org.mybatis.generator.internal.DefaultCommentGenerator;
import org.mybatis.generator.internal.util.StringUtility;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

/**
 * 自定义注释生成器
 *
 * @author team
 * @version v1.0
 * @date 2019/11/24 23:26
 */
public class CommentGenerator extends DefaultCommentGenerator {
    private boolean addRemarkComments = true;
    private boolean suppressAllComments = true;
    private static final String EXAMPLE_SUFFIX = "Example";
    private static final String API_MODEL_PROPERTY_FULL_CLASS_NAME = "io.swagger.annotations.ApiModelProperty";
    private String currentDateStr = (new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
    private Properties systemPro = System.getProperties();

    /**
     * 设置用户配置的参数
     * @param properties 参数
     */
    @Override
    public void addConfigurationProperties(Properties properties) {
        super.addConfigurationProperties(properties);
        this.addRemarkComments = StringUtility.isTrue(properties.getProperty("addRemarkComments"));
    }

    /**
     * 给字段添加注释
     * @param field model字段
     * @param introspectedTable 表
     * @param introspectedColumn 字段
     */
    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable,
                                IntrospectedColumn introspectedColumn) {
        String remarks = introspectedColumn.getRemarks();
        String stringReplace = "\"";
        // 根据参数和备注信息判断是否添加备注信息
        if (addRemarkComments && StringUtility.stringHasValue(remarks)) {
            // 数据库中特殊字符需要转义
            if (remarks.contains(stringReplace)) {
                remarks = remarks.replace(stringReplace, "");
            }
            // 给model的字段添加swagger注解
            field.addJavaDocLine("@ApiModelProperty(value = \""+remarks+"\")");
        }
    }

    /**
     * 给类添加注释
     * @param innerClass 类
     * @param introspectedTable 表实例
     */
    @Override
    public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable) {
        if (!this.suppressAllComments) {
            StringBuilder sb = new StringBuilder();
            innerClass.addJavaDocLine("/**");
            innerClass.addJavaDocLine(" * This class was generated by MyBatis Generator.");
            sb.append(" * This class corresponds to the database table ");
            sb.append(introspectedTable.getFullyQualifiedTable());
            sb.append(" * @author ");
            sb.append(systemPro.getProperty("user.name"));
            sb.append(" @version v1.0");
            sb.append(" * @date");
            sb.append(currentDateStr);
            this.addJavadocTag(innerClass, false);
            innerClass.addJavaDocLine(" */");
        }
    }

    /**
     * 给类添加注释
     * @param innerClass 类
     * @param introspectedTable 表实例
     * @param markAsDoNetDelete 是否标记删除
     */
    @Override
    public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable,
                                boolean markAsDoNetDelete) {
        if (!this.suppressAllComments) {
            StringBuilder sb = new StringBuilder();
            innerClass.addJavaDocLine("/**");
            innerClass.addJavaDocLine(" * This class was generated by MyBatis Generator.");
            sb.append(" * This class corresponds to the database table ");
            sb.append(introspectedTable.getFullyQualifiedTable());
            sb.append(" * @author ");
            sb.append(systemPro.getProperty("user.name"));
            sb.append(" @version v1.0");
            sb.append(" * @date");
            sb.append(currentDateStr);
            this.addJavadocTag(innerClass, markAsDoNetDelete);
            innerClass.addJavaDocLine(" */");
        }
    }

    /**
     * 给model的字段添加注释
     * @param field 字段
     * @param remarks 注释
     */
    private void addFieldJavaDoc(Field field, String remarks) {
        field.addJavaDocLine("/**");
        // 获取数据库字段的备注信息
        String[] remarkLines = remarks.split(System.getProperty("line.separator"));
        for (String remarkLine: remarkLines) {
            field.addJavaDocLine("*" + remarkLine);
        }
        addJavadocTag(field, true);
        field.addJavaDocLine("*/");
    }

    /**
     * 添加Java注解
     * @param compilationUnit 注解类
     */
    public void addJavaFieldComment(CompilationUnit compilationUnit) {
        super.addJavaFileComment(compilationUnit);
        // 只在model中添加swagger注解类的导入
        if (!compilationUnit.isJavaInterface() &&
                !compilationUnit.getType().getFullyQualifiedName().contains(EXAMPLE_SUFFIX)) {
            compilationUnit.addImportedType(new FullyQualifiedJavaType(API_MODEL_PROPERTY_FULL_CLASS_NAME));
        }
    }
}
