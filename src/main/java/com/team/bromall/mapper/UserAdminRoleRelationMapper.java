package com.team.bromall.mapper;

import com.team.bromall.model.UserAdminRoleRelation;
import com.team.bromall.model.UserAdminRoleRelationExample;
import java.util.List;

import com.team.bromall.model.UserPermission;
import com.team.bromall.model.UserRole;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Component;

public interface UserAdminRoleRelationMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_admin_role_relation
     *
     * @mbg.generated Fri Nov 29 11:29:29 CST 2019
     */
    long countByExample(UserAdminRoleRelationExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_admin_role_relation
     *
     * @mbg.generated Fri Nov 29 11:29:29 CST 2019
     */
    int deleteByExample(UserAdminRoleRelationExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_admin_role_relation
     *
     * @mbg.generated Fri Nov 29 11:29:29 CST 2019
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_admin_role_relation
     *
     * @mbg.generated Fri Nov 29 11:29:29 CST 2019
     */
    int insert(UserAdminRoleRelation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_admin_role_relation
     *
     * @mbg.generated Fri Nov 29 11:29:29 CST 2019
     */
    int insertSelective(UserAdminRoleRelation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_admin_role_relation
     *
     * @mbg.generated Fri Nov 29 11:29:29 CST 2019
     */
    List<UserAdminRoleRelation> selectByExample(UserAdminRoleRelationExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_admin_role_relation
     *
     * @mbg.generated Fri Nov 29 11:29:29 CST 2019
     */
    UserAdminRoleRelation selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_admin_role_relation
     *
     * @mbg.generated Fri Nov 29 11:29:29 CST 2019
     */
    int updateByExampleSelective(@Param("record") UserAdminRoleRelation record, @Param("example") UserAdminRoleRelationExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_admin_role_relation
     *
     * @mbg.generated Fri Nov 29 11:29:29 CST 2019
     */
    int updateByExample(@Param("record") UserAdminRoleRelation record, @Param("example") UserAdminRoleRelationExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_admin_role_relation
     *
     * @mbg.generated Fri Nov 29 11:29:29 CST 2019
     */
    int updateByPrimaryKeySelective(UserAdminRoleRelation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_admin_role_relation
     *
     * @mbg.generated Fri Nov 29 11:29:29 CST 2019
     */
    int updateByPrimaryKey(UserAdminRoleRelation record);

    /**
     * 批量插入用户角色关系
     * @param adminRoleRelationList 角色关系列表
     * @return 插入状态
     */
    int insertList(List<UserAdminRoleRelation> adminRoleRelationList);

    /**
     * 获取用户所有角色
     * @param adminId 用户ID
     * @return 用户角色
     */
    List<UserRole> getRoleList(Long adminId);

    /**
     * 获取用户所有角色权限
     * @param adminId 用户ID
     * @return 用户所有角色权限
     */
    List<UserPermission> getRolePermissionList(Long adminId);

    /**
     * 获取用户所有权限(包括+-权限)
     * @param adminId 用户ID
     * @return 用户所有权限
     */
    List<UserPermission> getPermissionList(Long adminId);

}